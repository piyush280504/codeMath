// I used Floyd fast and slow pointers to repeatedly replace number with sum of prime factors until slow==fast

class Solution {
    public static int calculateSumOfPrimes(int n) {
        int sum = 0;
        while (n % 2 == 0) {
            sum += 2;
            n /= 2;
        }
        for (int i = 3; i<=Math.sqrt(n); i += 2) {
            while (n % i == 0) {
                sum += i;
                n /= i;
            }
        }
        if (n > 2) {
            sum += n;
        }

        return sum;
    }

    public static int smallestValue(int n) {
        int slow = n;
        int fast = calculateSumOfPrimes(n);
        while (slow != fast) {
            slow = calculateSumOfPrimes(slow);
            fast = calculateSumOfPrimes(calculateSumOfPrimes(fast));
        }

        return slow;
    }

}
