class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_=0
        for i in range(len(s)):
            current_set=set()
            for j in range(i,len(s)):
                next_char={s[j]}
                if current_set & next_char:
                    break
                current_set|=next_char
                max_=max(max_,len(current_set))
        return max_

#The solution uses a set that checks for every possible substring at every step and compares it with the next character. If the intersection of the current set and next character is not empty, thye inner loop breaks
#because that indicates a repeating character in the current substring which does not update the max value. 

#This solution performs worse than the traditional sliding window approach but provides insights into the set operations.
